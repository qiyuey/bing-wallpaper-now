name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v4

  quality:
    name: Quality Gates (fmt + clippy + types) (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install Node dependencies
        run: npm ci

      - name: TypeScript type check
        run: npm run typecheck

      - name: Rust fmt check
        run: cargo fmt --manifest-path src-tauri/Cargo.toml -- --check

      - name: Rust clippy (deny warnings)
        run: cargo clippy --manifest-path src-tauri/Cargo.toml -- -D warnings

      - name: Build frontend
        run: npm run build

      - name: Rust tests (all targets)
        run: cargo test --manifest-path src-tauri/Cargo.toml --all-targets -- --nocapture

      - name: Optional network tests (Bing API)
        if: env.BING_TEST == '1'
        run: BING_TEST=1 cargo test --manifest-path src-tauri/Cargo.toml -- --ignored --nocapture

      - name: Upload dist artifact
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ runner.os }}
          path: dist

  nightly:
    name: Nightly Toolchain (non-blocking) - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Setup Nightly Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Install Node dependencies
        run: npm ci

      - name: Quick compile (no tests)
        run: cargo build --manifest-path src-tauri/Cargo.toml

  bundle:
    name: Tauri Bundle (conditional) - ${{ matrix.os }}
    needs: quality
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install Node dependencies
        run: npm ci

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: build

      - name: Upload bundles
        uses: actions/upload-artifact@v4
        with:
          name: tauri-bundles-${{ runner.os }}
          path: src-tauri/target/release/bundle
