name: CI

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22"
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  test:
    name: Test
    if: "!startsWith(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Rust Clippy
        run: cargo clippy --manifest-path src-tauri/Cargo.toml -- -D warnings

      - name: Rust format check
        run: cargo fmt --manifest-path src-tauri/Cargo.toml -- --check

      - name: Frontend Lint
        run: npm run lint

      - name: Frontend format check
        run: npm run format:check

      - name: TypeScript typecheck
        run: npm run typecheck

      - name: Frontend build
        run: npm run build

      - name: Rust tests
        run: cargo test --manifest-path src-tauri/Cargo.toml

      - name: Frontend tests
        run: pnpm run test:frontend

  bundle-x86:
    name: Bundle (${{ matrix.platform }})
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "Windows (x64)"
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: "Windows (ARM64)"
            os: windows-latest
            target: aarch64-pc-windows-msvc
          - platform: "macOS (Apple Silicon)"
            os: macos-latest
            target: aarch64-apple-darwin
          - platform: "macOS (Intel)"
            os: macos-13
            target: x86_64-apple-darwin
          - platform: "Ubuntu (x64)"
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          shared-key: stable-cache

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache
        shell: bash
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install x86_64 OpenSSL (macOS Intel only)
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          arch -x86_64 brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm run build

      - name: Extract changelog
        id: changelog
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          CHANGELOG=$(awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '$d' | tail -n +2)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="请查看完整的更新日志: [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)"
          fi
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build Tauri app and create GitHub Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "Bing Wallpaper Now v__VERSION__"
          args: --target ${{ matrix.target }}
          releaseBody: |
            # 🎉 Bing Wallpaper Now v__VERSION__

            一款跨平台桌面应用，自动获取并设置必应每日精美壁纸。

            ---

            ## ✨ 更新内容

            ${{ steps.changelog.outputs.content }}

            ---

            ## 📦 快速安装

            ### Windows
            - **x64 (Intel/AMD)**: 下载 **[MSI 安装包](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___x64_zh-CN.msi)** (推荐) 或 **[EXE 安装程序](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___x64-setup.exe)**
            - **ARM64**: 下载 **[MSI 安装包](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___arm64_zh-CN.msi)** 或 **[EXE 安装程序](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___arm64-setup.exe)**

            ### macOS
            - **Apple Silicon**: 下载 **[ARM64 DMG](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___aarch64.dmg)**
            - **Intel**: 下载 **[x64 DMG](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___x64.dmg)**

            **首次打开提示**：应用未经过 Apple 签名（需要每年 $99 的开发者账号），macOS 会阻止运行。

            **解决方法**：在终端运行以下命令移除隔离属性：
            ```bash
            xattr -rd com.apple.quarantine "/Applications/Bing Wallpaper Now.app"
            ```

            或在「系统设置 → 隐私与安全性」中点击「仍要打开」。详见 [macOS 安装指南](https://github.com/qiyuey/bing-wallpaper-now/blob/main/docs/MACOS_INSTALL.md)。

            ### Linux
            - **x64 (Intel/AMD)**:
              - Debian/Ubuntu: 下载 **[DEB 包](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/bing-wallpaper-now___VERSION___amd64.deb)**
              - 其他发行版: 下载 **[AppImage](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/bing-wallpaper-now___VERSION___amd64.AppImage)**
            - **ARM64**:
              - Debian/Ubuntu: 下载 **[DEB 包](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/bing-wallpaper-now___VERSION___arm64.deb)**
              - 其他发行版: 下载 **[AppImage](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/bing-wallpaper-now___VERSION___arm64.AppImage)**

            ---

            📝 [完整更新日志](https://github.com/qiyuey/bing-wallpaper-now/blob/main/CHANGELOG.md) | 🐛 [反馈问题](https://github.com/qiyuey/bing-wallpaper-now/issues)
          releaseDraft: false
          prerelease: false

      - name: Show sccache stats
        shell: bash
        run: sccache --show-stats

  bundle-linux-arm:
    name: Bundle (Ubuntu ARM64)
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          shared-key: stable-cache

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV

      - name: Setup Linux ARM64 cross-compilation
        run: |
          # Configure dual-arch sources
          cat > /tmp/sources.list << 'EOF'
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-security main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-updates main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-backports main multiverse universe restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -sc) main multiverse universe restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -sc)-security main multiverse universe restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -sc)-updates main multiverse universe restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -sc)-backports main multiverse universe restricted
          EOF
          sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo mv /tmp/sources.list /etc/apt/sources.list

          # Add ARM64 architecture
          sudo dpkg --add-architecture arm64
          sudo apt-get update

          # Install cross-compilation toolchain and ARM64 libraries
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libwebkit2gtk-4.1-dev:arm64 \
            libayatana-appindicator3-dev:arm64 \
            librsvg2-dev:arm64 \
            libssl-dev:arm64 \
            patchelf

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm run build

      - name: Build Tauri app for Linux ARM64
        run: pnpm tauri build --target aarch64-unknown-linux-gnu
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
          PKG_CONFIG_SYSROOT_DIR: /usr/aarch64-linux-gnu/

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb
            src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show sccache stats
        run: sccache --show-stats
