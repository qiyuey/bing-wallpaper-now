name: CI

on:
  # main 分支只运行测试，tag 推送时构建和发布
  push:
    branches: [main]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [main]
  workflow_dispatch:

# 添加必要的权限以创建 GitHub Release
permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22" # LTS 版本 (v22.21.0)，支持到 2027年4月

jobs:
  test:
    name: Test
    # 只在非 tag 的 push 和 PR 时运行测试
    if: "!startsWith(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: src-tauri/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Rust 代码质量检查
      - name: Rust Clippy
        run: cargo clippy --manifest-path src-tauri/Cargo.toml -- -D warnings

      - name: Rust format check
        run: cargo fmt --manifest-path src-tauri/Cargo.toml -- --check

      # 前端代码质量检查
      - name: Frontend Lint
        run: npm run lint

      - name: Frontend format check
        run: npm run format:check

      - name: TypeScript typecheck
        run: npm run typecheck

      - name: Frontend build
        run: npm run build

      - name: Rust tests
        run: cargo test --manifest-path src-tauri/Cargo.toml

      - name: Frontend tests
        run: pnpm run test:frontend

  bundle:
    name: Tauri Bundle (${{ matrix.platform }})
    # 只在推送 tag 时运行 bundle，节省普通 push 的构建时间
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "Ubuntu (x64)"
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - platform: "Ubuntu (ARM64)"
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - platform: "macOS (Intel)"
            os: macos-13
            target: x86_64-apple-darwin
          - platform: "macOS (Apple Silicon)"
            os: macos-latest
            target: aarch64-apple-darwin
          - platform: "Windows (x64)"
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: "Windows (ARM64)"
            os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV

      - name: Install Linux dependencies (x64)
        if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install Linux dependencies (ARM64)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          # Add ARM64 architecture first
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev:arm64 \
            libayatana-appindicator3-dev:arm64 \
            librsvg2-dev:arm64 \
            patchelf

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm run build

      - name: Extract changelog for current version
        id: changelog
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"

          # Extract content between current version header and next version header
          CHANGELOG=$(awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '$d' | tail -n +2)

          # If changelog is empty, use a default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="请查看完整的更新日志: [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)"
          fi

          # Save to output (handle multiline)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build Tauri app and create GitHub Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "Bing Wallpaper Now v__VERSION__"
          args: ${{ matrix.target && format('--target {0}', matrix.target) || '' }}
          releaseBody: |
            # 🎉 Bing Wallpaper Now v__VERSION__

            一款跨平台桌面应用，自动获取并设置必应每日精美壁纸。

            ---

            ## ✨ 更新内容

            ${{ steps.changelog.outputs.content }}

            ---

            ## 📦 快速安装

            ### Windows
            - **x64 (Intel/AMD)**: 下载 **[MSI 安装包](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___x64_zh-CN.msi)** (推荐) 或 **[EXE 安装程序](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___x64-setup.exe)**
            - **ARM64**: 下载 **[MSI 安装包](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___arm64_zh-CN.msi)** 或 **[EXE 安装程序](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___arm64-setup.exe)**

            ### macOS
            - **Apple Silicon**: 下载 **[ARM64 DMG](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___aarch64.dmg)**
            - **Intel**: 下载 **[x64 DMG](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/Bing.Wallpaper.Now___VERSION___x64.dmg)**

            **首次打开提示**：应用未经过 Apple 签名（需要每年 $99 的开发者账号），macOS 会阻止运行。

            **解决方法**：在终端运行以下命令移除隔离属性：
            ```bash
            xattr -rd com.apple.quarantine "/Applications/Bing Wallpaper Now.app"
            ```

            或在「系统设置 → 隐私与安全性」中点击「仍要打开」。详见 [macOS 安装指南](https://github.com/qiyuey/bing-wallpaper-now/blob/main/docs/MACOS_INSTALL.md)。

            ### Linux
            - **x64 (Intel/AMD)**:
              - Debian/Ubuntu: 下载 **[DEB 包](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/bing-wallpaper-now___VERSION___amd64.deb)**
              - 其他发行版: 下载 **[AppImage](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/bing-wallpaper-now___VERSION___amd64.AppImage)**
            - **ARM64**:
              - Debian/Ubuntu: 下载 **[DEB 包](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/bing-wallpaper-now___VERSION___arm64.deb)**
              - 其他发行版: 下载 **[AppImage](https://github.com/${{ github.repository }}/releases/download/v__VERSION__/bing-wallpaper-now___VERSION___arm64.AppImage)**

            ---

            📝 [完整更新日志](https://github.com/qiyuey/bing-wallpaper-now/blob/main/CHANGELOG.md) | 🐛 [反馈问题](https://github.com/qiyuey/bing-wallpaper-now/issues)
          releaseDraft: false
          prerelease: false

      - name: Show sccache stats
        run: sccache --show-stats

      - name: Upload bundles
        uses: actions/upload-artifact@v4
        with:
          name: tauri-bundles-${{ matrix.platform }}
          path: src-tauri/target/release/bundle
          retention-days: 7
