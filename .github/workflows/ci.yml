name: CI

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "24"

jobs:
  lint-and-test:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Compute pnpm store path
        id: pnpm-store
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path --silent 2>/dev/null || echo "")
          if [ -z "$STORE_PATH" ]; then
            # Fallback to default pnpm store location based on OS
            if [ "$RUNNER_OS" = "Windows" ]; then
              STORE_PATH="$LOCALAPPDATA/pnpm/store"
            elif [ "$RUNNER_OS" = "macOS" ]; then
              STORE_PATH="$HOME/Library/pnpm/store"
            else
              STORE_PATH="$HOME/.local/share/pnpm/store"
            fi
          fi
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV
          echo "store_path=$STORE_PATH" >> $GITHUB_OUTPUT
          echo "Computed pnpm store path: $STORE_PATH"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.store_path }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type check
        run: pnpm run typecheck

      - name: Run linter
        run: pnpm run lint

  rust-check:
    name: Rust Check & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Check Rust formatting
        run: cargo fmt --manifest-path src-tauri/Cargo.toml --check

      - name: Run Clippy
        run: cargo clippy --manifest-path src-tauri/Cargo.toml --all-targets --all-features -- -D warnings

      - name: Run Rust tests
        run: cargo test --manifest-path src-tauri/Cargo.toml
