name: CI

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
      - "[0-9]*.*.*"
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22"
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  test:
    name: Test
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Rust Clippy
        run: cargo clippy --manifest-path src-tauri/Cargo.toml -- -D warnings

      - name: Rust format check
        run: cargo fmt --manifest-path src-tauri/Cargo.toml -- --check

      - name: Frontend Lint
        run: npm run lint

      - name: Frontend format check
        run: npm run format:check

      - name: TypeScript typecheck
        run: npm run typecheck

      - name: Frontend build
        run: npm run build

      - name: Rust tests
        run: cargo test --manifest-path src-tauri/Cargo.toml

      - name: Frontend tests
        run: pnpm run test:frontend

  create-release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Extract changelog
        id: changelog
        shell: bash
        run: |
          CHANGELOG=$(sed -n "/^## \[${{ github.ref_name }}\]/,/^## \[/p" CHANGELOG.md | sed '1d;$d')
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="请查看完整的更新日志: [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)"
          fi
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Delete existing release if present (not tag)
        continue-on-error: true
        run: |
          gh release delete ${{ github.ref_name }} --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Bing Wallpaper Now ${{ github.ref_name }}"
          draft: false
          prerelease: false
          make_latest: true
          body: |
            # 🎉 Bing Wallpaper Now ${{ github.ref_name }}

            一款跨平台桌面应用，自动获取并设置必应每日精美壁纸。

            ---

            ## ✨ 更新内容

            ${{ steps.changelog.outputs.content }}

            ---

            ## 📦 快速安装

            ### Windows
            - **x64 (Intel/AMD)**: 下载 [**MSI 安装包**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Bing.Wallpaper.Now_${{ github.ref_name }}_x64_zh-CN.msi) (推荐) 或 [**EXE 安装程序**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Bing.Wallpaper.Now_${{ github.ref_name }}_x64-setup.exe)
            - **ARM64**: 下载 [**MSI 安装包**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Bing.Wallpaper.Now_${{ github.ref_name }}_arm64_zh-CN.msi) 或 [**EXE 安装程序**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Bing.Wallpaper.Now_${{ github.ref_name }}_arm64-setup.exe)

            ### macOS
            - **Apple Silicon**: 下载 [**ARM64 DMG**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Bing.Wallpaper.Now_${{ github.ref_name }}_aarch64.dmg)
            - **Intel**: 下载 [**x64 DMG**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Bing.Wallpaper.Now_${{ github.ref_name }}_x64.dmg)

            **首次打开提示**：应用未经过 Apple 签名（需要每年 $99 的开发者账号），macOS 会阻止运行。

            **解决方法**：在终端运行以下命令移除隔离属性：
            ```bash
            xattr -rd com.apple.quarantine "/Applications/Bing Wallpaper Now.app"
            ```

            或在「系统设置 → 隐私与安全性」中点击「仍要打开」。详见 [macOS 安装指南](https://github.com/${{ github.repository }}/blob/main/docs/MACOS_INSTALL.md)。

            ### Linux
            - **x64 (Intel/AMD)**: Debian/Ubuntu 下载 [**DEB 包**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/bing-wallpaper-now_${{ github.ref_name }}_amd64.deb)，其他发行版下载 [**AppImage**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/bing-wallpaper-now_${{ github.ref_name }}_amd64.AppImage)
            - **ARM64**: Debian/Ubuntu 下载 [**DEB 包**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/bing-wallpaper-now_${{ github.ref_name }}_arm64.deb)，其他发行版下载 [**AppImage**](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/bing-wallpaper-now_${{ github.ref_name }}_aarch64.AppImage)

            ---

            📝 [完整更新日志](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) | 🐛 [反馈问题](https://github.com/${{ github.repository }}/issues)

  bundle:
    name: Bundle (${{ matrix.platform }})
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "Windows (x64)"
            os: windows-latest
          - platform: "Windows (ARM64)"
            os: windows-11-arm
          - platform: "macOS (Apple Silicon)"
            os: macos-latest
          - platform: "macOS (Intel)"
            os: macos-15-intel
          - platform: "Ubuntu (x64)"
            os: ubuntu-24.04
          - platform: "Ubuntu (ARM64)"
            os: ubuntu-24.04-arm

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          shared-key: stable-cache

      - name: Setup sccache
        if: matrix.os != 'windows-11-arm'
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache
        if: matrix.os != 'windows-11-arm'
        shell: bash
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install x86_64 OpenSSL (macOS Intel only)
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          arch -x86_64 brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm run build

      - name: Extract changelog
        id: changelog
        shell: bash
        run: |
          CHANGELOG=$(sed -n "/^## \[${{ github.ref_name }}\]/,/^## \[/p" CHANGELOG.md | sed '1d;$d')
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="请查看完整的更新日志: [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)"
          fi
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build Tauri app and upload to GitHub Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}

      - name: Show sccache stats
        if: matrix.os != 'windows-11-arm'
        shell: bash
        run: sccache --show-stats
